% SYNTAX TEST "Packages/PostScript/PostScript.sublime-syntax"

% comment {/%) blah blah blah
% <- punctuation.definition.comment
%^^^^^^^^^^^^^^^ comment.line

  123 -98 +17
% ^^^ constant.numeric
%     ^^^ constant.numeric
%         ^^^ constant.numeric

  -.002 123.6e10 1.0E-5 -1. 0.0
% ^^^^^ constant.numeric
%       ^^^^^^^^ constant.numeric
%                ^^^^^^ constant.numeric
%                       ^^^ constant.numeric
%                           ^^^ constant.numeric

  8#1 16#F 32#1z
% ^^^ constant.numeric
%     ^^^^ constant.numeric
%          ^^^^^ constant.numeric

  true false null
% ^^^^ constant.language
%      ^^^^^ constant.language
%            ^^^^ constant.language

  systemdict globaldict userdict
% ^^^^^^^^^^ constant.other.dictionary
%            ^^^^^^^^^^ constant.other.dictionary
%                       ^^^^^^^^ constant.other.dictionary

(Strings may contain special characters *!&}^% and
% <- punctuation.definition.string.begin
%^^^^^^^^^^^^^^^^^^^^^^^^^^ string.literal
balanced parentheses (()) (and so on).)
%^^^^^^^^^^^^^^^^^^^^^^^^^^^ string.literal
%                                     ^ punctuation.definition.string.end

(\n \377)
% <- punctuation.definition.string.begin
%^^ constant.character.escape
%   ^^^^ constant.character.escape
%       ^ punctuation.definition.string.end

<hex>
% <- punctuation.definition.string.begin
%^ invalid.illegal.unexpected-character
%^^^^ string.hexadecimal
%  ^ invalid.illegal.unexpected-character
%   ^ punctuation.definition.string.end

  <~asc¡i~>
% ^^ punctuation.definition.string.begin
% ^^^^^^^^^ string.ascii
%      ^ invalid.illegal.unexpected-character
%        ^^ punctuation.definition.string.end

abc Offset $$ 23A 13−456 a.b $MyDict @pattern
%^^ variable.other.readwrite
%   ^^^^^^ variable.other.readwrite
%          ^^ variable.other.readwrite
%             ^^^ variable.other.readwrite
%                ^ - variable.other.readwrite
%                 ^^^^^^ variable.other.readwrite
%                        ^^^ variable.other.readwrite
%                            ^^^^^^^ variable.other.readwrite
%                                    ^^^^^^^^ variable.other.readwrite

/
% <- variable.other.readwrite punctuation.definition.variable

//
% <- variable.other.readwrite punctuation.definition.variable
%^ variable.other.readwrite punctuation.definition.variable

/name //name
% <- punctuation.definition.variable
%^^^^ variable.other.readwrite
%     ^^ punctuation.definition.variable
%     ^^^^^^ variable.other.readwrite

[/name 22 <f00> (str)]
%^^^^^^^^^^^^^^^^^^^^^ meta.brackets
% <- punctuation.definition.brackets.begin
%^^^^^ variable.other.readwrite
%      ^^ constant.numeric
%         ^^^^^ string.hexadecimal
%               ^^^^^ string.literal
%                    ^ punctuation.definition.brackets.end

{/name 22 <f00> (str)}
%^^^^^^^^^^^^^^^^^^^^^ meta.brackets
% <- punctuation.definition.brackets.begin
%^^^^^ variable.other.readwrite
%      ^^ constant.numeric
%         ^^^^^ string.hexadecimal
%               ^^^^^ string.literal
%                    ^ punctuation.definition.brackets.end

 << dictionary >>
%^^ punctuation.definition.dictionary.begin
%^^^^^^^^^^^^^^^^ meta.dictionary
%              ^^ punctuation.definition.dictionary.end

= ==
% <- keyword.operator.file
% ^^ keyword.operator.file

1 2 add
%   ^^^ keyword.operator.arithmetic

1 2 le
%   ^^ keyword.operator.comparison

a b gt {a} {b} ifelse
%              ^^^^^^ keyword.operator.control
